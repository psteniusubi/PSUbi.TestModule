# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  batch: true
  tags:
   include:
     - 'release/*'

pool:
  vmImage: ubuntu-latest

steps:
- checkout: self
  displayName: 'Checkout GIT'
  clean: true

- task: DotNetCoreCLI@2
  displayName: 'Restore .NET'
  inputs:
    command: 'restore'
    feedsToUse: 'select'
    vstsFeed: '479af406-8051-4a92-8565-212e80f6cb9b/fc3ef3fd-5bff-43b1-b1fe-33124513434d'

- task: DotNetCoreCLI@2
  displayName: 'Build .NET'
  inputs:
    command: 'build'
    arguments: '--no-restore'

- task: DotNetCoreCLI@2
  displayName: 'Package PWSH (net8.0)'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: 'cs/PSUbi.TestModule/*.csproj'
    arguments: '--no-build --framework net8.0 -o pwsh/PSUbi.TestModule/lib/net8.0'
    zipAfterPublish: false
    modifyOutputPath: false

- task: DotNetCoreCLI@2
  displayName: 'Package PWSH (net481)'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: 'cs/PSUbi.TestModule/*.csproj'
    arguments: '--no-build --framework net481 -o pwsh/PSUbi.TestModule/lib/net481'
    zipAfterPublish: false
    modifyOutputPath: false

- task: PowerShell@2
  displayName: 'Prepare PWSH'
  inputs:
    targetType: 'inline'
    script: |
      Install-PSResource -Name "Microsoft.PowerShell.PSResourceGet" -Version "1.1.0-preview2" -Prerelease -Scope "CurrentUser" -Repository "PSGallery" -TrustRepository -Verbose
      Register-PSResourceRepository -Name "Ubisecure" -Uri "https://pkgs.dev.azure.com/Ubisecure/Research/_packaging/Modules/nuget/v3/index.json"
    pwsh: true
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)

- task: PowerShell@2
  displayName: 'Pack PWSH'
  inputs:
    targetType: 'inline'
    script: |
      $DestinationPath = New-Item "$(Build.ArtifactStagingDirectory)/pwsh" -ItemType "Directory" | Convert-Path
      Compress-PSResource -Path "pwsh/PSUbi.TestModule" -DestinationPath $DestinationPath -Verbose
    pwsh: true

- task: DotNetCoreCLI@2
  displayName: 'Push PWSH'
  inputs:
    command: 'push'    
    packagesToPush: '$(Build.ArtifactStagingDirectory)/pwsh/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: '479af406-8051-4a92-8565-212e80f6cb9b/fc3ef3fd-5bff-43b1-b1fe-33124513434d'

